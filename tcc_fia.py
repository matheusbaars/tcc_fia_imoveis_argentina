# -*- coding: utf-8 -*-
"""TCC FIA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HJL1OXHy1SJrYh5d3wUgxLgEviJDqBl_

# Importando os módulos
"""

!pip install dash

import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objs as go
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
import seaborn as sns

"""# Trazendo o dataset"""

imoveis = pd.read_csv('/content/drive/MyDrive/FIA/TCC/properati-AR-2016-11-01-properties-sell.csv', parse_dates=['created_on'])

pd.options.display.max_columns = None
pd.options.display.max_rows = None

imoveis.shape

imoveis.head(3)

imoveis.dtypes

"""# Filtrando a base

## Filtro do ano de 2016 na lista
"""

imoveis_2016 = imoveis[(imoveis['created_on'] >= '2016-01-01') & (imoveis['created_on'] <= '2016-12-31')]

imoveis_2016.head(3)

imoveis_2016.shape

"""# Trabalhando com missing values"""

imoveis_2016.isna().sum().sort_values(ascending=False)

"""## Verificando a variável price

### caso a variável price seja missing value, o mesmo será retirado da base
"""

imoveis_2016 = imoveis_2016[imoveis_2016['price'].notnull()]

"""## Verificando a variável floor

### se a variável property_type for do tipo apartamento e floor é missing value então será desconsiderado da base, porém caso seja apartamento, o mesmo será considerado 1
"""

#imoveis_2016[(imoveis_2016['property_type']=='house') & (imoveis_2016['floor'].notnull())]

imoveis_2016.isna().sum().sort_values(ascending=False)

"""# Removendo colunas desnecessárias"""

corr = imoveis_2016.corr()
corr

# dcc.Graph(id='heatmap',
#     figure = {'data': [
#         go.Heatmap(z=corr.values,
#                     x=corr.index.values,
#                     y=corr.columns.values)
#     ]})
sns.heatmap(corr)

corr

"""## Removendo multicolinearidade"""

imoveis_2016.drop(['price_aprox_local_currency', 'price'], axis=1, inplace=True)

imoveis_2016.shape

imoveis_2016.drop(['expenses', 'image_thumbnail', 'geonames_id','lon', 'lat', 'lat-lon', 'operation', 'properati_url'], axis=1, inplace=True)

imoveis_2016['property_type'].value_counts(1)

pd.set_option('display.float_format', lambda x: '%.2f' % x)

qtd = imoveis_2016['place_name'].value_counts(1)
qtd = pd.DataFrame(qtd).reset_index()
qtd.rename(columns={
    'index':'place_name',
    'place_name':'porcentagem'
}, inplace=True)
qtd
outros = []
medios = []
for index, row in qtd.iterrows():
  if row['porcentagem'] < 0.005:
    outros.append(row['place_name'])
    # print(row['place_name'], row['porcentagem'])
  elif row['porcentagem'] <0.01:
    medios.append(row['place_name'])

print(outros)
print(medios)

imoveis_2016['place_name'] = imoveis_2016['place_name'].apply(lambda x: 'Outros' if x in outros else x)
imoveis_2016['place_name'] = imoveis_2016['place_name'].apply(lambda x: 'Medios' if x in medios else x)

media = imoveis_2016.groupby(['place_name'])['price_aprox_usd'].mean().sort_values
media

median = imoveis_2016.groupby(['place_name'])['price_aprox_usd'].median().sort_values(ascending=False)

imoveis_2016['place_name'].value_counts(1)

px.histogram(imoveis_2016, x='place_name').update_xaxes(categoryorder='total descending')

imoveis_2016.head(3)

px.box(imoveis_2016, y='price_aprox_usd')

"""## Verificando o que é outlier"""

describe = imoveis_2016.describe()
describe

IIQ = describe['price_aprox_usd'].loc['75%'] - describe['price_aprox_usd'].loc['25%']
IIQ = IIQ * 30
IIQ

imoveis_2016 = imoveis_2016[imoveis_2016['price_aprox_usd'] != 0.00]

imoveis_2016.shape

imoveis_2016.groupby('property_type')['price_aprox_usd'].mean()

#imoveis_2016 = imoveis_2016[imoveis_2016[''price_aprox_usd] <= ]

imoveis_2016.isna().sum().sort_values(ascending=False)

imoveis_2016['property_type'].value_counts(1)

imoveis_2016['currency'].value_counts(1)

imoveis_2016['place_name'].value_counts(1)

px.histogram(imoveis_2016, x='property_type').update_xaxes(categoryorder='total descending')

